/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 can.glb -t -s -T -k -r 
Files: can.glb [32.4KB] > /Users/thib-cs/Work/Perso/project3D/threeJs-challenge-vending-machine/public/models/canCustom/can-transformed.glb [5.06KB] (84%)
*/

import * as THREE from 'three'
import {useCubeTexture, useGLTF} from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Circle: THREE.Mesh
    Circle_1: THREE.Mesh
    Circle_2: THREE.Mesh
  }
  materials: {
    orange: THREE.MeshStandardMaterial
    lightMetal: THREE.MeshStandardMaterial
    blue: THREE.MeshStandardMaterial
  }
}


export function Can(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('models/canCustom/can-transformed.glb') as GLTFResult
  const envMap = useCubeTexture(
    ['px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'],
    {path: '/envmap/cityNight/'}
  );

  const orangeMaterial = materials.orange.clone();
  orangeMaterial.envMap = envMap;
  orangeMaterial.needsUpdate = true;

  const lightMaterial = materials.lightMetal.clone();
  lightMaterial.envMap = envMap;
  lightMaterial.needsUpdate = true;

  const blueMaterial = materials.blue.clone();
  blueMaterial.envMap = envMap;
  blueMaterial.needsUpdate = true;

  return (
    <group {...props} dispose={null}>
      <group name="can" scale={0.557}>
        <mesh name="Circle" castShadow receiveShadow geometry={nodes.Circle.geometry} material={orangeMaterial} />
        <mesh name="Circle_1" castShadow receiveShadow geometry={nodes.Circle_1.geometry} material={lightMaterial} />
        <mesh name="Circle_2" castShadow receiveShadow geometry={nodes.Circle_2.geometry} material={blueMaterial} />
      </group>
    </group>
  )
}

useGLTF.preload('models/canCustom/can-transformed.glb')
