/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 noodles.glb -t -s -T -k -r
Files: noodles.glb [14.64KB] > /Users/thib-cs/Work/Perso/project3D/threeJs-challenge-vending-machine/public/models/noodles/noodles-transformed.glb [3.89KB] (73%)
*/

import * as THREE from 'three'
import {useCubeTexture, useGLTF} from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Circle001: THREE.Mesh
    Circle001_1: THREE.Mesh
    Circle001_2: THREE.Mesh
  }
  materials: {
    orange: THREE.MeshStandardMaterial
    ['white.001']: THREE.MeshStandardMaterial
    blue: THREE.MeshStandardMaterial
  }
}


export function Noodle(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('models/noodles/noodles-transformed.glb') as GLTFResult
  const envMap = useCubeTexture(
    ['px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'],
    {path: '/envmap/cityNight/'}
  );

  const orangeMaterial = materials.orange.clone();
  orangeMaterial.envMap = envMap;
  orangeMaterial.envMapIntensity = 2;

  orangeMaterial.needsUpdate = true;

  const lightMaterial = materials["white.001"].clone();
  lightMaterial.envMap = envMap;
  lightMaterial.envMapIntensity = 2;
  lightMaterial.needsUpdate = true;

  const blueMaterial = materials.blue.clone();
  blueMaterial.envMap = envMap;
  blueMaterial.needsUpdate = true;

  return (
    <group scale={0.7} {...props} dispose={null}>
      <group name="noodle" position={[0, 0, 0.034]}>
        <mesh name="Circle001" castShadow receiveShadow geometry={nodes.Circle001.geometry} material={orangeMaterial} />
        <mesh name="Circle001_1" castShadow receiveShadow geometry={nodes.Circle001_1.geometry} material={lightMaterial} />
        <mesh name="Circle001_2" castShadow receiveShadow geometry={nodes.Circle001_2.geometry} material={blueMaterial} />
      </group>
    </group>
  )
}

useGLTF.preload('models/noodles/noodles-transformed.glb')
