/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 bottle_custom.glb -t -s -T -k -r 
Files: bottle_custom.glb [9.19KB] > /Users/thib-cs/Work/Perso/project3D/threeJs-challenge-vending-machine/public/models/bottleCustom/bottle_custom-transformed.glb [3.23KB] (65%)
*/

import * as THREE from 'three'
import {useCubeTexture, useGLTF} from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Plane007: THREE.Mesh
    Plane007_1: THREE.Mesh
    Plane007_2: THREE.Mesh
  }
  materials: {
    red: THREE.MeshStandardMaterial
    white: THREE.MeshStandardMaterial
    orange: THREE.MeshStandardMaterial
  }
}

export function BottleCustom(props: JSX.IntrinsicElements['group']) {
  const {nodes, materials} = useGLTF('models/bottleCustom/bottle_custom-transformed.glb') as GLTFResult
  const envMap = useCubeTexture(
    ['px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'],
    {path: '/envmap/cityNight/'}
  );
  const redMaterial = materials.red.clone();
  redMaterial.envMap = envMap;
  redMaterial.envMapIntensity = 3;

  redMaterial.needsUpdate = true;

  const whiteMaterial = materials.white.clone();
  whiteMaterial.envMap = envMap;
  whiteMaterial.envMapIntensity = 3;
  whiteMaterial.needsUpdate = true;

  const orangeMaterial = materials.orange.clone();
  orangeMaterial.envMap = envMap;
  orangeMaterial.envMapIntensity = 3;
  orangeMaterial.needsUpdate = true;

  return (
    <group {...props} dispose={null}>
      <mesh castShadow receiveShadow geometry={nodes.Plane007.geometry} material={redMaterial}/>
      <mesh castShadow receiveShadow geometry={nodes.Plane007_1.geometry} material={whiteMaterial}/>
      <mesh castShadow receiveShadow geometry={nodes.Plane007_2.geometry} material={orangeMaterial}/>
    </group>
  )
}

useGLTF.preload('models/bottleCustom/bottle_custom-transformed.glb')
